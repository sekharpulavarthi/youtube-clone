{"version":3,"file":"static/js/25.9886d7b0.chunk.js","mappings":"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","sources":["Components/SearchShimmer.js","Components/SearchVideoCard.js","Components/SearchResultsPage.js","utils/PublishedData.js"],"sourcesContent":["import React from \"react\";\n\nconst SearchShimmer = () => {\n  return (\n    <div className=\"grid md:grid-cols-12  bg-gray-50 mb-2 dark:bg-slate-800 max-sm:px-10 max-sm:pb-10\">\n      {/* Thumbnail */}\n      <div className=\"md:col-span-3 col-span-12 bg-gray-300 mr-2 rounded-lg dark:bg-slate-600 h-40\"></div>\n\n      {/* Details */}\n      <div className=\"max-md:h-40 md:col-span-8 col-span-12 bg-gray-100 grid grid-rows-4 py-1 dark:bg-slate-800\">\n        <div className=\"row-span-1  py-2 w-11/12\">\n          <p className=\"bg-gray-300 h-1/2 rounded-lg \"></p>{\" \"}\n        </div>\n        <div className=\"row-span-1  py-2 w-11/12\">\n          <p className=\"bg-gray-300 h-1/2 rounded-lg \"></p>{\" \"}\n        </div>\n        <div className=\"row-span-1  py-2 w-3/4\">\n          <p className=\"bg-gray-300 h-1/2 rounded-lg\"></p>{\" \"}\n        </div>\n        <div className=\"row-span-1  py-2 w-1/2\">\n          <p className=\"bg-gray-300 h-1/2 rounded-lg\"></p>{\" \"}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SearchShimmer;\n","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { channelImage_api } from \"../utils/constants\";\nimport { PublishedTimeOfVideo } from \"../utils/PublishedData\";\nimport SearchShimmer from \"./SearchShimmer\";\n\n// Each Video Card in Search Results Page\nconst SearchVideoCard = ({ data }) => {\n  const [details, setDetails] = useState(null);\n\n  useEffect(() => {\n    getChannelImage();\n  }, []);\n\n  // Getting Channel Data with Channel Id\n  const getChannelImage = async () => {\n    const api_data = await fetch(channelImage_api + \"&id=\" + data?.channelId);\n    const json = await api_data.json();\n    setDetails(json);\n    // console.log(json);\n  };\n\n  // Loading Shimmer\n  if (details == null) return <SearchShimmer />;\n  const imgUrl = details?.items[0].snippet?.thumbnails?.high?.url || {};\n\n  return (\n    <div className=\"flex max-sm:flex-col flex-row bg-gray-50 py-2 dark:bg-slate-800 max-sm:px-10 max-sm:pb-10\">\n      {/* Thumbnail */}\n      <img\n        className=\"flex justify-center rounded-lg h-40 max-sm:w-full\"\n        src={data?.thumbnails?.medium?.url}\n      />\n      {/* Video Details */}\n      <div className=\"px-2 w-full flex flex-col\">\n        <span className=\"font-semibold text-lg dark:text-white\">\n          {data?.title}\n        </span>\n        <p className=\"text-sm text-slate-600 mb-2 dark:text-slate-300\">\n          {PublishedTimeOfVideo(data?.publishedAt)}\n        </p>\n        <div className=\"flex items-center\">\n          <img className=\"w-8 my-2 rounded-full\" src={imgUrl}></img>\n          <span className=\"flex items-center px-2 text-slate-700 text-sm dark:text-slate-200 \">\n            {data?.channelTitle}\n          </span>\n        </div>\n        {/* Video Description */}\n        <span className=\"text-sm text-slate-700 dark:text-slate-300\">\n          {data?.description}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default SearchVideoCard;\n","import React, { useEffect, useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { Google_api_key, Search_results_api } from \"../utils/constants\";\nimport SearchVideoCard from \"./SearchVideoCard\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { setChannelId } from \"../utils/channelIdSlice\";\nimport { closeMenu } from \"../utils/appSlice\";\n\n// Search Results\nconst SearchResultsPage = () => {\n  const [params] = useSearchParams();\n  const query = params.get(\"q\");\n  const [searchresults, setSearchResults] = useState([]);\n  const dispatcher = useDispatch();\n\n  useEffect(() => {\n    getSearchData();\n    dispatcher(closeMenu());\n  }, [query]);\n\n  const getSearchData = async () => {\n    const data = await fetch(\n      Search_results_api + query + \"&key=\" + Google_api_key\n    );\n    const json = await data.json();\n    setSearchResults(json?.items);\n  };\n\n  return (\n    <div className=\"p-2 w-full dark:bg-slate-800 overflow-y-hidden\">\n      {searchresults.map((result) => (\n        <Link\n          key={result?.id?.videoId}\n          to={\"/watch?v=\" + result?.id?.videoId}\n          onClick={() => {\n            dispatcher(setChannelId(result?.snippet?.channelId));\n          }}\n        >\n          <SearchVideoCard data={result?.snippet} />\n        </Link>\n      ))}\n    </div>\n  );\n};\n\nexport default SearchResultsPage;\n","export const PublishedTimeOfVideo = (publishedAt) => {\n  const publishedDate = new Date(publishedAt);\n  const currentDate = new Date();\n  if (currentDate.getFullYear() - publishedDate.getFullYear()) {\n    return (\n      currentDate.getFullYear() - publishedDate.getFullYear() + \" years ago\"\n    );\n  } else {\n    if (currentDate.getMonth() - publishedDate.getMonth()) {\n      return currentDate.getMonth() - publishedDate.getMonth() + \" months ago\";\n    } else {\n      if (currentDate.getDate() - publishedDate.getDate() === 0) return \"Today\";\n      if (currentDate.getDate() - publishedDate.getDate() === 1)\n        return \"1 day ago\";\n      return currentDate.getDate() - publishedDate.getDate() + \" days ago\";\n    }\n  }\n};\n"],"names":["_jsxs","className","children","_jsx","_ref","_details$items$0$snip","_details$items$0$snip2","_details$items$0$snip3","_data$thumbnails","_data$thumbnails$medi","data","_useState","useState","_useState2","_slicedToArray","details","setDetails","useEffect","getChannelImage","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","api_data","json","wrap","_context","prev","next","fetch","channelImage_api","channelId","sent","stop","apply","arguments","SearchShimmer","imgUrl","items","snippet","thumbnails","high","url","src","medium","title","PublishedTimeOfVideo","publishedAt","channelTitle","description","_useSearchParams","useSearchParams","query","get","searchresults","setSearchResults","dispatcher","useDispatch","getSearchData","closeMenu","Search_results_api","Google_api_key","map","result","_result$id","_result$id2","Link","to","id","videoId","onClick","_result$snippet","setChannelId","SearchVideoCard","publishedDate","Date","currentDate","getFullYear","getMonth","getDate"],"sourceRoot":""}